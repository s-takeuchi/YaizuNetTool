<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="./style.css" type="text/css">
</HEAD>

<style type="text/css">
<!--
.spc { margin-left: 2em; margin-right: 0em; }
-->
</style>

<BODY>s
<div id="container">
<H1>4. Processing Element</H1>

<H2 ID="4.1">4.1 Summary of processing element</H2>
In the workspace of StkFw, one or more dataflows can be definable.<br>
One dataflow is composed of one or more threads.<br>
Moreover the thread is defined as the combination of processes (processing elements) these perform data receiving, modifying and sending.<br>
The process link can be defined between processing elements and thread link can be defined between threads
(process link is represented in white solid line and thread link is represented in green dotted line).<br>
StkFw can control each thread execution independently using thread controller.<P>
<CENTER><IMG SRC="dataflow.jpg"></CENTER><P>


There are few types of processing element.<p>
<TABLE BORDER="1">
<TR><TD>Initiator</TD><TD>This processing element means thread start point. We can select Initiator element name on the thread controller
and can control starting and stopping thread.</TD></TR>
<TR><TD>Terminator</TD><TD>This processing element means thread end point. If Terminator processing element has a thread link to Initiator
processing element on other thread, process proceeds to next Initiator element after Terminator process is finished.
If there is no thread link to Initiator processing element, the process is go back to first Initiator processing element of same dataflow where this
Terminator processing element belongs.</TD></TR>
<TR><TD>Stopper</TD><TD>This processing element means thread end point. The differences from Terminator processing element is that...<br>
(1) We cannot define thread link to Initiator processing element on other thread. Hence, process cannot proceed from Stopper.<br>
(2) When Stopper processing element finishes its own process, the process does not go back to Initiator on same dataflow.</TD></TR>
<TR><TD>Check point</TD><TD>Processing element for conditional checking.
When the process proceeds to Check point processing element, check the its own presented condition and does not proceed to next processing element
until the condition satisfied.</TD></TR>
<TR><TD>Action</TD><TD>This processing element executes the presented particular process.
The process proceeds to next processing element with no condition after the process is done.</TD></TR>
</TABLE>
<P>
The limitation regarding workspace and thread is shown below.<p>
<TABLE BORDER="1">
<TR><TD>Maximum number of processing elements in one thread.</TD><TD>99</TD></TR>
<TR><TD>Maximum number of processing elements on one workspace</TD><TD>499</TD></TR>
<tr><td>Maximum number of TCP/UDP receiver and sender processing element on one workspace</td><td>256</td></tr>
</TABLE><BR>
Note: If we define process link or thread link on workspace, the links on the dataflow must not configure loop topology.
If we configure the links as loop topology, the thread might not work appropriately.<P>


</BODY>
