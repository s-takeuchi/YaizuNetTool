<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="./style.css" type="text/css">
</HEAD>

<style type="text/css">
<!--
.spc { margin-left: 2em; margin-right: 0em; }
-->
</style>

<BODY>s
<div id="container">
<H1>4. Processing Element</H1>

<H2 ID="4.1">4.1 Processing element summary</H2>
One or more dataflows can be defined in the StkFw workspace.<br>
Each dataflow is composed of one or more threads. A thread is defined as a combination of processes (processing elements) for data receipt, modification and dispatch.<br>
Process links (shown with solid white lines) can be defined between processing elements, and thread links (shown with dotted green lines) can be defined between threads.<br>
StkFw can be used to control individual thread execution independently via a thread controller.<P>
<CENTER><IMG SRC="dataflow.jpg"></CENTER><P>


The different processing element types are outlined below.<p>
<TABLE BORDER="1">
<TR><TD>Initiator</TD><TD>This type of processing element is for a thread start point. The initiator element can be selected from a list of elements on the thread controller, 
and starting/stopping of the thread can be controlled.</TD></TR>

<TR><TD>Terminator</TD><TD>This type of processing element is for a thread end point.
If a terminator processing element has a thread link to an initiator processing element on another thread,
the process moves to the next initiator element after the terminator process finishes.
If there is no thread link to an initiator processing element, the process returns to the first initiator processing element of the dataflow
to which the terminator processing element belongs. </TD></TR>

<TR><TD>Stopper</TD><TD>This type of processing element is also for a thread end point. It differs from a terminator processing element in the following ways: <br>
(1) A thread link to an initiator processing element on another thread cannot be defined. As a result, a process cannot proceed from a stopper processing element. <br>
(2) When a stopper processing element finishes its own process, the process does not return to an initiator in the same dataflow. </TD></TR>

<TR><TD>Check point</TD><TD>This type of processing element is for conditional checking. When the process proceeds to a check point processing element,
its own presented condition is checked. Processing does not move to the next element until the relevant condition is satisfied. </TD></TR>

<TR><TD>Action</TD><TD>This type of processing element is for the execution of a particular presented process.
The process moves to the next element with no conditions after this process is complete. </TD></TR>
</TABLE>
<P>
Workspace and thread limitations are outlined below.<p>
<TABLE BORDER="1">
<TR><TD>Maximum number of processing elements in one thread:</TD><TD>99</TD></TR>
<TR><TD>Maximum number of processing elements in one workspace:</TD><TD>499</TD></TR>
<tr><td>Maximum number of TCP/UDP receiver and sender processing elements in one workspace:</td><td>256</td></tr>
</TABLE><BR>
Note: When process links or thread links are defined in a workspace, links in the dataflow must not be configured with loop topology as this may cause unexpected thread behavior.<P>


</BODY>
